import random 
import importlib
import re
import time
import asyncio
from aiohttp import web
from YukiBot import web_server
import logging
from platform import python_version as y
from sys import argv
from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver

import YukiBot.modules.no_sql.users_db as sql
from YukiBot import (
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    OWNER_ID,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)
from YukiBot.modules import ALL_MODULES
from YukiBot.modules.helper_funcs.chat_status import is_user_admin
from YukiBot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time
PM_START_TEX = """
[√ó] ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á [√ó]....
"""


PM_START_TEXT = """ 
 ú·¥á è {}, ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á \n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n …™ ·¥Ä·¥ç {}\n\n‚ò® …™  ú·¥Ä·¥†·¥á ·¥ç·¥ès·¥õ ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás."""

buttons = [
    [
        InlineKeyboardButton(
            text=" üÑøüÑ∞üÖÅüÑ∞üÑ≥üÑæüÖá ", 
            url=f"https://t.me/{dispatcher.bot.username}?startgroup=true", 
        ),
    ],
    [
        InlineKeyboardButton(text=" Ä·¥á·¥ò·¥è", callback_data="gib_source"),
        InlineKeyboardButton(text="·¥Ä ô·¥è·¥ú·¥õ", callback_data="yuki"),
    ],
    [
        InlineKeyboardButton(text=" ú·¥á ü·¥ò ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="Main_help"),
    ],
     
]


yuki = [
    [
        InlineKeyboardButton(text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á", url=f"https://t.me/paradoxdump"),
        InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"),
    ],
    [
        InlineKeyboardButton(
            text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
    ],
]
#######

STICKER = [
"CAACAgUAAxkBAAJW7mZDAwUouDxA6pqsogjcf11KL1m4AAKkEQACx5YYVjAqpMnTvDLONQQ",
]

######
HELP_STRINGS = f"""
‚ùñ {BOT_NAME}  ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñs ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."""

ABHI = [
"https://telegra.ph/file/b6619541396d150c572a8.jpg",
"https://telegra.ph/file/56c9da084a528eac54142.jpg",   

]

NYKAA = [
"https://telegra.ph/file/b6619541396d150c572a8.jpg",
"https://telegra.ph/file/56c9da084a528eac54142.jpg",    
]


DONATE_STRING = f""" ú·¥á è  ú·¥ú·¥ç·¥Ä…¥,  ú·¥Ä·¥©·¥© è ·¥õ·¥è  ú·¥á·¥Ä Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ö·¥è…¥·¥Ä·¥õ·¥á.  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä @…¢ ú·¥ès·¥õ_·¥ã·¥ú…¥ “ì·¥è Ä ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥è Ä  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥†…™s…™·¥õ ·¥ç è s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ @paradoxdump ·¥Ä…¥·¥Ö ·¥Äs·¥ã ·¥õ ú·¥á Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥"""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("YukiBot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_photo(
        chat_id=chat_id,
        photo=START_IMG,
        caption=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard,
    )

def start(update: Update, context: CallbackContext):
    args = context.args
    global uptime
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                    ),
                )
            elif args[0].lower() == "markdownhelp":
                IMPORTED["ex·¥õ Ä·¥Äs"].markdown_help_sender(update)
            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "r·¥ú ü·¥ás" in IMPORTED:
                IMPORTED["r·¥ú ü·¥ás"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            
            x=update.effective_message.reply_sticker(
                random.choice(STICKER))
            x.delete()
            usr = update.effective_user
            lol = update.effective_message.reply_text(
                PM_START_TEX.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            time.sleep(0.4)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢... 10%")
            time.sleep(0.5)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢... 24%")
            time.sleep(0.3)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢... 39%")
            time.sleep(0.4)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢... 65%")
            time.sleep(0.5)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢... 85%")
            time.sleep(0.3)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢... 100%")
            time.sleep(0.4)
            lol.edit_text("s è…¥·¥Ñ ú Ä·¥è…¥…™·¥¢·¥Ä·¥õ…™·¥è…¥")
            lol.delete()
            
            update.effective_message.reply_photo(random.choice(NYKAA),PM_START_TEXT.format(escape_markdown(first_name),BOT_NAME,sql.num_users(),sql.num_chats()),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            random.choice(NYKAA),
            caption=" Y·¥ú·¥ã…™ O…¥…¥·¥Ä …™s ·¥Ä ü…™·¥†·¥á\n\n‚ò® ·¥ú·¥ò·¥õ…™·¥ç·¥á ‚û• `<code>{}</code>`".format(
                uptime
            ),
            reply_markup=InlineKeyboardMarkup(yuki),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """‡πè  ü·¥è…¢ ·¥õ ú·¥á ·¥á Ä Ä·¥è Ä ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è …¥·¥è·¥õ…™“ì è ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "‚ùç ·¥Ä…¥ ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥°·¥Äs  Ä·¥Ä…™s·¥á·¥Ö ·¥° ú…™ ü·¥á  ú·¥Ä…¥·¥Ö ü…™…¥…¢ ·¥Ä…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á\n"
        "‚ùç <pre>·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á = {}</pre>\n\n"
        "‚ùç <pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                " *·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös Íú∞·¥è Ä* *{}* \n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_caption(text,
                parse_mode=ParseMode.MARKDOWN,
                
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="yuki_support")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def yuki_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "yuki_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_caption(f"O·¥°…¥·¥á Ä : @corpsealone | @ghost_kun",
            parse_mode=ParseMode.MARKDOWN,
                                   
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="yuki_back"),
                        InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"),
                    ],
                ]
            ),
            )
    elif query.data == "yuki_support":
        query.message.edit_caption("‚ò® ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥è·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò “ì·¥è Ä,  ô·¥è·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥."
            f"\n\n‚ò® …™“ì ·¥Ä…¥ è  ô·¥ú…¢ …™…¥ {dispatcher.bot.first_name}, ·¥© ü·¥á·¥Äs·¥á  Ä·¥á·¥©·¥è Ä·¥õ …™·¥õ ·¥Ä·¥õ s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="yuki_back"),
                        InlineKeyboardButton(
                            text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"
                        ),
                    ],   
                ]
            ),
        )
    elif query.data == "yuki_back":
        first_name = update.effective_user.first_name 
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
        )
def YukiBot_Main_Callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Main_help":
        query.message.edit_caption(f"""
 ‚ò®  ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú Íú∞·¥è Ä {BOT_NAME}
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥ç·¥Ä…¥·¥Ä…¢·¥á", callback_data="help_back"),
                    ],
                    [
                        InlineKeyboardButton(text="Íú±·¥ò·¥Ä·¥ç", callback_data="Music_yuki"),
                    ],
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="yuki_back")
                    ],
                ]
            ),
            )
    elif query.data=="basic_help":
        query.message.edit_caption("""  ú·¥á Ä·¥á …™s ·¥Ä ü ü ·¥Ä…¥…™·¥ç·¥á  Ä·¥Ä…¥·¥Ö·¥è·¥ç …™·¥ç·¥Ä…¢·¥ás ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.\n\n‚ùç /gecg ·Øì s·¥á…¥·¥Ö  Ä·¥Ä…¥·¥Ö·¥è·¥ç …¢·¥á·¥Ñ…¢ …™·¥ç…¢.\n‚ùç /avatar ·Øì s·¥á…¥·¥Ös  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥Ä·¥†·¥Ä·¥õ·¥Ä Ä …™·¥ç…¢.\n‚ùç /foxgirl ·Øì s·¥á…¥·¥Ös  Ä·¥Ä…¥·¥Ö·¥è·¥ç “ì·¥èx…¢…™ Ä ü s·¥è·¥ú Ä·¥Ñ·¥á …™·¥ç·¥Ä…¢·¥ás.\n‚ùç /waifus ·Øì s·¥á…¥·¥Ös  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥°·¥Ä…™“ì·¥ú …™·¥ç…¢.\n‚ùç /neko ·Øì s·¥á…¥·¥Ös  Ä·¥Ä…¥·¥Ö·¥è·¥ç s“ì·¥° …¥·¥á·¥ã·¥è s·¥è·¥ú Ä·¥Ñ·¥á …™·¥ç·¥Ä…¢·¥ás.\n‚ùç /gasm ·Øì s·¥á…¥·¥Ös  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥è Ä…¢·¥Äs·¥ç …™·¥ç…¢.\n‚ùç /cuddle ·Øì s·¥á…¥·¥Ös  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥Ñ·¥ú·¥Ö·¥Ö ü·¥á …™·¥ç…¢.\n‚ùç /shinobu ·Øì s·¥á…¥·¥Ö  Ä·¥Ä…¥·¥Ö·¥è·¥ç s ú…™…¥·¥è ô·¥ú …™·¥ç…¢.\n‚ùç /megumin ·Øì s·¥á…¥·¥Ö  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥ç·¥á…¢·¥ú·¥ç…™…¥ …™·¥ç…¢.\n‚ùç /bully ·Øì s·¥á…¥·¥Ö  Ä·¥Ä…¥·¥Ö·¥è·¥ç  ô·¥ú ü ü è …™·¥ç…¢.\n‚ùç /cry ·Øì s·¥á…¥·¥Ö  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥Ñ Ä è …™·¥ç…¢.\n‚ùç /awoo ·Øì s·¥á…¥·¥Ö  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥Ä·¥°·¥è·¥è …™·¥ç…¢.""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Main_help"),InlineKeyboardButton(text="ANIME", callback_data="Avisha_")
                    ]
                ]
            ),
            )
    elif query.data=="yuki_back":
        query.message.edit_caption(""" ·¥áx·¥ò·¥á Ä·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös 

‚ùÖ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥s ‚ùÖ

‚ùç  /unbanall ·Øì ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs
‚ùç  /unmuteall ·Øì ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ä ü ü ·¥Ä ü ü “ì Ä·¥è·¥ç  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò

‚ùÖ ·¥ò…™…¥…¥·¥á·¥Ö M·¥áss·¥Ä…¢·¥ás ‚ùÖ

‚ùç  /pin ·Øì [·¥ç·¥áss·¥Ä…¢·¥á] s·¥á…¥·¥Ös ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ ú Ä·¥è·¥ú…¢ ú ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥ò…™…¥s …™·¥õ.
‚ùç  /pin ·Øì ·¥ò…™…¥s ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á …™…¥  Ä·¥á·¥ò ü è
‚ùç  /unpin ·Øì  Ä·¥á·¥ç·¥è·¥†·¥ás ·¥õ ú·¥á ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á.
‚ùç  /adminlist ·Øì  ü…™s·¥õ ·¥è“ì ·¥Ä ü ü ·¥õ ú·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü  Ä·¥è ü·¥ás ·¥Äss…™…¢…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á Äs.

‚ùç /bug ·Øì (·¥ç·¥áss·¥Ä…¢·¥á) ·¥õ·¥è s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ä…¥·¥Ö ·¥á Ä Ä·¥è Äs ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥Ä Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ 
·¥áx ·Øì /bug H·¥á è T ú·¥á Ä·¥á Is ·¥Ä s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥á Ä Ä·¥è Ä @username ·¥è“ì ·¥Ñ ú·¥Ä·¥õ! .""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Main_help"),InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="yuki_support")
                    ]
                ]
            ),
            )                                        
    elif query.data=="advance_help":
        query.message.edit_caption("""  ú·¥á Ä·¥á …™s ·¥Ä ü ü ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä ·¥Ñ·¥Ä·¥õ·¥Ñ ú·¥á Ä ( …¢·¥Ä ô ô·¥Ä Ä  ú·¥á Ä·¥á·¥ç ) ·¥Ä…¥…™·¥ç·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.\n\n‚ùç /guess ·Øì ·¥õ·¥è …¢·¥ú·¥áss ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä.\n‚ùç /fav ·Øì ·¥Ä·¥Ö·¥Ö  è·¥è·¥ú Ä “ì·¥Ä·¥† Ä·¥Ä·¥õ·¥á.\n‚ùç /trade ·Øì ·¥õ·¥è ·¥õ Ä·¥Ä·¥Ö·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs.\n‚ùç /gift ·Øì …¢…™·¥†·¥á ·¥Ä…¥ è ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä “ì Ä·¥è·¥ç  è·¥è·¥ú Ä ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ús·¥á Ä.\n‚ùç /collection ·Øì ·¥õ·¥è s·¥á·¥á  è·¥è·¥ú Ä ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥.\n‚ùç /topgroups ·Øì s·¥á·¥á ·¥õ·¥è·¥ò …¢ Ä·¥è·¥ú·¥òs, ·¥ò·¥ò ü …¢·¥ú·¥áss·¥ás ·¥ç·¥ès·¥õ …™…¥ ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥òs.\n‚ùç /top ·Øì ·¥õ·¥è·¥è s·¥á·¥á ·¥õ·¥è·¥ò ·¥ús·¥á Äs.\n‚ùç /ctop ·Øì  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ·¥õ·¥è·¥ò.\n‚ùç /changetime ·Øì ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä ·¥Ä·¥ò·¥ò·¥á·¥Ä Ä ·¥õ…™·¥ç·¥á .\n‚ùç /herem ·Øì ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä ·¥Ñ ú·¥Ä·¥õ·¥Ñ ú.""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Main_help"),InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="yuki_support")
                    ]
                ]
            ),
            )
    elif query.data=="expert_help":
        query.message.edit_caption(f"""  ú·¥á Ä·¥á …™s ·¥Ä…™ Ä Ä…™…¥…¢, ·¥ç·¥Ä…¥…¢·¥Ä, ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä ·¥Ä…¥·¥Ö ·¥á·¥õ·¥Ñ.\n\n‚ùç /anime <anime> ·Øì  Ä·¥á·¥õ·¥ú Ä…¥s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥Ä…¥…™·¥ç·¥á.\n‚ùç /character <·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä> ·Øì  Ä·¥á·¥õ·¥ú Ä…¥s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä.\n‚ùç /manga <·¥ç·¥Ä…¥…¢·¥Ä> ·Øì  Ä·¥á·¥õ·¥ú Ä…¥s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥ç·¥Ä…¥…¢·¥Ä.\n‚ùç /user  <·¥ús·¥á Ä> ·Øì  Ä·¥á·¥õ·¥ú Ä…¥s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä ·¥ç è·¥Ä…¥…™·¥ç·¥á ü…™s·¥õ ·¥ús·¥á Ä.\n‚ùç /upcoming ·Øì  Ä·¥á·¥õ·¥ú Ä…¥s ·¥Ä  ü…™s·¥õ ·¥è“ì …¥·¥á·¥° ·¥Ä…¥…™·¥ç·¥á …™…¥ ·¥õ ú·¥á ·¥ú·¥ò·¥Ñ·¥è·¥ç…™…¥…¢ s·¥á·¥Äs·¥è…¥s.\n‚ùç /kaizoku <·¥Ä…¥…™·¥ç·¥á> ·Øì s·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¥ ·¥Ä…¥…™·¥ç·¥á ·¥è…¥ ·¥Ä…¥…™·¥ç·¥á·¥ã·¥Ä…™·¥¢·¥è·¥ã·¥ú.·¥Ñ·¥è·¥ç\n‚ùç /kayo <·¥Ä…¥…™·¥ç·¥á> ·Øì s·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¥ ·¥Ä…¥…™·¥ç·¥á ·¥è…¥ ·¥Ä…¥…™·¥ç·¥á·¥ã·¥Ä è·¥è.·¥Ñ·¥è·¥ç\n‚ùç /airing <·¥Ä…¥…™·¥ç·¥á> ·Øì  Ä·¥á·¥õ·¥ú Ä…¥s ·¥Ä…¥…™·¥ç·¥á ·¥Ä…™ Ä…™…¥…¢ …™…¥“ì·¥è.\n\n‚ùç /latest ·Øì ·¥Ñ ú·¥á·¥Ñ·¥ã  ü·¥Ä·¥õ·¥ás·¥õ ·¥Ä…¥…™·¥ç·¥á s ú·¥è·¥°s ·¥Ä…¥·¥Ö ·¥á·¥ò…™s·¥è·¥Ö·¥ás.""",
                                   
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Main_help"),InlineKeyboardButton(text="·¥áx·¥õ Ä·¥Ä", callback_data="yuki_support")
                    ]
                ]
            ),
            )
    elif query.data=="donation_help":
        query.message.edit_caption("""üí• ·¥Ä Ä·¥õ…™“ì…™·¥Ñ…™·¥Ä ü …™…¥·¥õ·¥á ü  ü…™…¢·¥á…¥·¥Ñ·¥á “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥s üí•\n\n ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös \n\n‚ùç ·¥Ä ô·¥è·¥ú·¥õ ·Øì ·¥õ ú·¥á ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ …¢·¥ò·¥õ ·¥Ä…™ - 4 ·¥ç·¥è·¥Ö·¥á ü Íú∞·¥è Ä ·¥Ä…¥ ·¥á…¥ ú·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ ·¥áx·¥ò·¥á Ä…™·¥á…¥·¥Ñ·¥á. \n\n‚ùç ·¥õ ú…™Íú± …™Íú± ·¥Ä …¥·¥á·¥° Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á, ·¥Ä…¥·¥Ö  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á …™·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ü è...\n\n‚ùç /ask ·Øì ·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥ús…™…¥…¢ …¢·¥ò·¥õ “ì·¥è Ä  Ä·¥ás·¥ò·¥è…¥·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ús·¥á Ä «´·¥ú·¥á Ä…™·¥ás.""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [ 
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="yuki_back"),InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Main_help")
                    ]
                ]
            ),
            )  
def Source_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_caption(
            f"""  ú·¥á Ä·¥á …™s s·¥è·¥ç·¥á ·¥Ä…¥…™·¥ç·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä·¥Ös “ì·¥è Ä  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                     [
                        InlineKeyboardButton(text="·¥°·¥Ä…™“ì·¥ús", callback_data="basic_help"),
                        InlineKeyboardButton(text="·¥Ä…™ Ä…™…¥…¢", callback_data="expert_help")
                    ],
                    [
                        InlineKeyboardButton(text="…¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á", callback_data=""),
                        InlineKeyboardButton(text="·¥Ä…¥…™·¥ç·¥á-…¢…™“ì", callback_data="Music_yuki_extra") 
                    ],
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Main_help")
                    ],
                ]
            ),
        )
    elif query.data == "source_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(
            PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            
        )

        
def Music_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Music_":
        query.message.edit_caption(f"""  ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú Íú∞·¥è Ä ·¥ç·¥úÍú±…™·¥Ñ """,
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ä·¥Ö·¥ç…™…¥", callback_data="Music_admin"
                        ),
                        InlineKeyboardButton(
                            text="·¥ò ü·¥Ä è", callback_data="Music_play"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text=" ô·¥è·¥õ", callback_data="Music_bot"),
                        InlineKeyboardButton(
                            text="·¥áx·¥õ Ä·¥Ä",
                            callback_data="Music_extra",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Main_help")
                    ],
                ]
            ),
        )
    elif query.data == "Music_admin":
        query.message.edit_caption(f"* ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
            f"""
‚ùÖ ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä…¥·¥Ö ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Ä·¥Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚ùÖ

‚ùç /pause ·Øì ·¥©·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.

‚ùç /resume ·Øì  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥©·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç.

‚ùç /skip ·Øì s·¥ã…™·¥© ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥ «´·¥ú·¥á·¥ú·¥á.

‚ùç /end ·¥è Ä /stop ·Øì ·¥Ñ ü·¥á·¥Ä Äs ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥Ä…¥·¥Ö ·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.

‚ùç /player ·Øì …¢·¥á·¥õ ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥© ü·¥Ä è·¥á Ä ·¥©·¥Ä…¥·¥á ü.

‚ùç /queue ·Øì s ú·¥è·¥°s ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ü…™s·¥õ.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="·¥õ·¥è·¥è üs", callback_data="yuki_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_play":
        query.message.edit_caption(f"* ·¥ò ü·¥Ä è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
            f"""
‚ùç /play ·¥è Ä /vplay ·¥è Ä /cplay ·Øì  ô·¥è·¥õ ·¥°…™ ü ü Íú±·¥õ·¥Ä Ä·¥õ ·¥ò ü·¥Ä è…™…¥…¢  è·¥è·¥ú Ä …¢…™·¥†·¥á…¥ œô·¥ú·¥á Ä è on ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥è Ä Íú±·¥õ Ä·¥á·¥Ä·¥ç  ü…™·¥†·¥á  ü…™…¥·¥ãÍú± ·¥è…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õÍú±.

‚ùç /playforce ·¥è Ä /vplayforce ·¥è Ä /cplayforce ·Øì “ì·¥è Ä·¥Ñ·¥á ·¥ò ü·¥Ä è Íú±·¥õ·¥è·¥òÍú± ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ò ü·¥Ä è…™…¥…¢ ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ò ü·¥Ä è…™…¥…¢ ·¥õ ú·¥á Íú±·¥á·¥Ä Ä·¥Ñ ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥Íú±·¥õ·¥Ä…¥·¥õ ü è ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ö…™Íú±·¥õ·¥ú Ä ô…™…¥…¢/clearing queue.

‚ùç /channelplay ·Øì [·¥Ñ ú·¥Ä·¥õ ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö] ·¥è Ä [·¥Ö…™Íú±·¥Ä ô ü·¥á] - ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥ç·¥úÍú±…™·¥Ñ ·¥è…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ “ì Ä·¥è·¥ç  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.

 ‚ùÖ  ô·¥è·¥õ Íú±·¥á Ä·¥†·¥á Ä ·¥ò ü·¥Ä è ü…™Íú±·¥õÍú± ‚ùÖ
 
‚ùç /playlist ·Øì ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä Íú±·¥Ä·¥†·¥á·¥Ö ·¥ò ü·¥Ä è ü…™Íú±·¥õ ·¥è…¥ Íú±·¥á Ä·¥†·¥á ÄÍú±.
‚ùç /deleteplaylist ·Øì ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä…¥ è Íú±·¥Ä·¥†·¥á·¥Ö ·¥ç·¥úÍú±…™·¥Ñ …™…¥  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™Íú±·¥õ
‚ùç /play ·Øì Íú±·¥õ·¥Ä Ä·¥õ ·¥ò ü·¥Ä è…™…¥…¢  è·¥è·¥ú Ä Íú±·¥Ä·¥†·¥á·¥Ö ·¥ò ü·¥Ä è ü…™Íú±·¥õ “ì Ä·¥è·¥ç Íú±·¥á Ä·¥†·¥á ÄÍú±.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),InlineKeyboardButton(text="·¥áx·¥õ Ä·¥Ä", callback_data="yuki_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_bot":
        query.message.edit_caption(f"*  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
           
            f"""
‚ùç /stats ·Øì …¢·¥á·¥õ ·¥õ·¥è·¥ò 10 ·¥õ Ä·¥Ä·¥Ñ·¥ãÍú± …¢ ü·¥è ô·¥Ä ü Íú±·¥õ·¥Ä·¥õÍú±, ·¥õ·¥è·¥ò 10 ·¥úÍú±·¥á ÄÍú± ·¥è“ì  ô·¥è·¥õ, ·¥õ·¥è·¥ò 10 ·¥Ñ ú·¥Ä·¥õÍú± ·¥è…¥  ô·¥è·¥õ, ·¥õ·¥è·¥ò 10 ·¥ò ü·¥Ä è·¥á·¥Ö …™…¥ ·¥Ä ·¥Ñ ú·¥Ä·¥õ ·¥á·¥õ·¥Ñ ·¥á·¥õ·¥Ñ.

‚ùç /sudolist ·Øì ·¥Ñ ú·¥á·¥Ñ·¥ã s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥è“ì ·¥Ä ô…¢   ô·¥è·¥õ

‚ùç /lyrics [·¥ç·¥ús…™·¥Ñ …¥·¥Ä·¥ç·¥á] ·Øì s·¥á·¥Ä Ä·¥Ñ ú·¥ás  ü è Ä…™·¥Ñs “ì·¥è Ä ·¥õ ú·¥á ·¥ò·¥Ä Ä·¥õ…™·¥Ñ·¥ú ü·¥Ä Ä ·¥ç·¥ús…™·¥Ñ ·¥è…¥ ·¥°·¥á ô.

‚ùç /song [·¥õ Ä·¥Ä·¥Ñ·¥ã …¥·¥Ä·¥ç·¥á] or [ è·¥õ  ü…™…¥·¥ã] ·Øì ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä…¥ è ·¥õ Ä·¥Ä·¥Ñ·¥ã “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á …™…¥ ·¥ç·¥ò3 or ·¥ç·¥ò4 “ì·¥è Ä·¥ç·¥Ä·¥õÍú±.

‚ùç /player ·Øì  …¢·¥át ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò ü·¥Ä è…™…¥…¢ ·¥ò·¥Ä…¥·¥á ü.

‚ùÖ c Íú±·¥õ·¥Ä…¥·¥ÖÍú± Íú∞·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ò ü·¥Ä è ‚ùÖ

‚ùç /queue ·¥è Ä /cqueue ·Øì ·¥Ñ ú·¥á·¥Ñ·¥ã Q·¥ú·¥á·¥ú·¥á  ü…™Íú±·¥õ ·¥èÍú∞ ·¥ç·¥úÍú±…™·¥Ñ.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="·¥õ·¥è·¥è üs", callback_data="yuki_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_extra":
        query.message.edit_caption(f"* ·¥áx·¥õ Ä·¥Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
            
             f"""
‚ùç /mstart ·Øì Íú±·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á ·¥ç·¥úÍú±…™·¥Ñ  ô·¥è·¥õ.

‚ùç /mhelp ·Øì …¢·¥á·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±  ú·¥á ü·¥ò·¥á Ä ·¥ç·¥á…¥·¥ú ·¥°…™·¥õ ú ·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö ·¥áx·¥ò ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥Íú± ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±.

‚ùç /ping ·Øì ·¥ò…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã  Ä·¥Ä·¥ç, ·¥Ñ·¥ò·¥ú ·¥á·¥õ·¥Ñ Íú±·¥õ·¥Ä·¥õÍú± ·¥è“ì  ô·¥è·¥õ.

*‚ùÖ …¢ Ä·¥è·¥ú·¥ò Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ‚ùÖ*

‚ùç /settings ·Øì …¢·¥á·¥õ a ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á …¢ Ä·¥è·¥ú·¥ò Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥°…™·¥õ ú …™…¥ ü…™…¥·¥á  ô·¥ú·¥õ·¥õ·¥è…¥Íú±
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="·¥õ·¥è·¥è üs", callback_data="yuki_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,

        )

    query = update.callback_query
    if query.data == "Music_yuki":
        query.message.edit_caption(f"""  ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú Íú∞·¥è Ä Íú±·¥ò·¥Ä·¥ç  Ä·¥Ä…™·¥Ö """,
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Íú±·¥ò·¥Ä·¥ç", callback_data="Music_yuki_admin"
                        ),
                        InlineKeyboardButton(
                            text=" Ä·¥Ä…™·¥Ö", callback_data="Music_yuki_play"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", callback_data="Music_yuki_bot"),
                        InlineKeyboardButton(
                            text="·¥Ñ ú·¥Ä·¥õ-·¥Ä…™",
                            callback_data="donation_help",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Main_help")
                    ],
                ]
            ),
        )
    elif query.data == "Music_yuki_admin":
        query.message.edit_caption(f"* Íú±·¥ò·¥Ä·¥ç  ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
            f"""\n\n÷ç ùó¶ùóΩùóÆùó∫ ‚û† ‡πè Íú±·¥ò·¥Ä·¥çÍú± ·¥Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á. ‡πè\n  ‡πõ /spam <count> <message to spam> (you can reply any message if you want bot to reply that message and do spamming)\n  ‡πõ /spam <count> <replying any message>\n\n÷ç ùó£ùóºùóøùóªùó¶ùóΩùóÆùó∫ ‚û† ‡πè ·¥ò·¥è Ä·¥ç·¥è…¢ Ä·¥Ä·¥ò ú è Íú±·¥ò·¥Ä·¥ç. ‡πè\n  ‡πõ /pspam <count>\n\n÷ç ùóõùóÆùóªùó¥ ‚û† ‡πè Íú±·¥ò·¥Ä·¥çÍú±  ú·¥Ä…¥…¢…™…¥…¢ ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú∞·¥è Ä …¢…™·¥†·¥á…¥ ·¥Ñ·¥è·¥ú…¥·¥õ·¥á Ä.""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_yuki"),InlineKeyboardButton(text="·¥õ·¥è·¥è üs", callback_data="yuki_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_yuki_play":
        query.message.edit_caption(f"*  Ä·¥Ä…™·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
            f"""\n\n÷ç ùó•ùóÆùó∂ùó± ‚û† ‡πè ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥áÍú±  Ä·¥Ä…™·¥Ö ·¥è…¥ ·¥Ä…¥ è …™…¥·¥Ö…™·¥†…™·¥Ö·¥ú·¥Ä ü ·¥úÍú±·¥á Ä Íú∞·¥è Ä …¢…™·¥†·¥á…¥  Ä·¥Ä…¥…¢·¥á. ‡πè\n  ‡πõ /raid <count> <username>\n  ‡πõ /raid <count> <reply to user>\n\n÷ç ùó•ùó≤ùóΩùóπùòÜùó•ùóÆùó∂ùó± ‚û† ‡πè ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥áÍú±  Ä·¥á·¥ò ü è  Ä·¥Ä…™·¥Ö ·¥è…¥ ·¥õ ú·¥á ·¥úÍú±·¥á Ä. ‡πè\n  ‡πõ /rraid <replying to user>\n  ‡πõ /rraid <username>\n\n÷ç ùóóùó•ùó≤ùóΩùóπùòÜùó•ùóÆùó∂ùó± ‚û† ‡πè ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥áÍú±  Ä·¥á·¥ò ü è  Ä·¥Ä…™·¥Ö ·¥è…¥ ·¥õ ú·¥á ·¥úÍú±·¥á Ä. ‡πè\n  ‡πõ /drraid <replying to user>\n  ‡πõ /drraid <username>\n\n÷ç ùêåùêëùêöùê¢ùêù ‚û† ‡πè  ü·¥è·¥†·¥á  Ä·¥Ä…™·¥Ö ·¥è…¥ ·¥õ ú·¥á ·¥úÍú±·¥á Ä. ‡πè\n  ‡πõ /mraid <count> <username>\n  ‡πõ /mraid <count> <reply to user>\n\n÷ç ùêíùêëùêöùê¢ùêù ‚û† ‡πè Íú± ú·¥Ä è·¥Ä Ä…™  Ä·¥Ä…™·¥Ö ·¥è…¥ ·¥õ ú·¥á ·¥úÍú±·¥á Ä. ‡πè\n  ‡πõ /sraid <count> <username>\n  ‡πõ /sraid <count> <reply to user>\n\n÷ç ùêÇùêëùêöùê¢ùêù ‚û† ‡πè ·¥Ä ô·¥Ñ·¥Ö  Ä·¥Ä…™·¥Ö ·¥è…¥ ·¥õ ú·¥á ·¥úÍú±·¥á Ä. ‡πè\n  ‡πõ /craid <count> <username>\n  ‡πõ /craid <count> <reply to user>""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Music_yuki"),InlineKeyboardButton(text="·¥áx·¥õ Ä·¥Ä", callback_data="yuki_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_yuki_bot":
        query.message.edit_caption(f"*  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
           
            f"""\n\n÷ç ùó®ùòÄùó≤ùóøùóïùóºùòÅ ‚û† ‡πè ·¥úÍú±·¥á Ä ô·¥è·¥õ ·¥Ñ·¥ç·¥ÖÍú± ‡πè\n  ‡πõ /ping \n  ‡πõ /reboot\n  ‡πõ /sudo <reply to user>  ·Øì Owner Cmd\n  ‡πõ /logs ·Øì Owner Cmd\n\n÷ç ùóòùó∞ùóµùóº ‚û† ‡πè ·¥õ·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥á·¥Ñ ú·¥è ·¥è…¥ ·¥Ä…¥ è ·¥úÍú±·¥á Ä ‡πè\n  ‡πõ /echo <reply to user>\n  ‡πõ /rmecho <reply to user>\n\n÷ç ùóüùó≤ùóÆùòÉùó≤ ‚û† ‡πè ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü ‡πè\n  ‡πõ /leave <group/chat id>\n  ‡πõ /leave ·Øì Type in the Group bot will auto leave that group""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_yuki"),InlineKeyboardButton(text="·¥õ·¥è·¥è üs", callback_data="yuki_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_yuki_extra":
        query.message.edit_caption(f"* ·¥áx·¥õ Ä·¥Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± *"
            
             f"""
‚ùç /mstart ·Øì Íú±·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á ·¥ç·¥úÍú±…™·¥Ñ  ô·¥è·¥õ.

‚ùç /mhelp ·Øì …¢·¥á·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±  ú·¥á ü·¥ò·¥á Ä ·¥ç·¥á…¥·¥ú ·¥°…™·¥õ ú ·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö ·¥áx·¥ò ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥Íú± ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±.

‚ùç /ping ·Øì ·¥ò…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã  Ä·¥Ä·¥ç, ·¥Ñ·¥ò·¥ú ·¥á·¥õ·¥Ñ Íú±·¥õ·¥Ä·¥õÍú± ·¥è“ì  ô·¥è·¥õ.

*‚ùÖ …¢ Ä·¥è·¥ú·¥ò Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ‚ùÖ*

‚ùç /settings ·Øì …¢·¥á·¥õ a ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á …¢ Ä·¥è·¥ú·¥ò Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥°…™·¥õ ú …™…¥ ü…™…¥·¥á  ô·¥ú·¥õ·¥õ·¥è…¥Íú±
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_yuki"),InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="Main_help")
                    ]
                ]
            ),
        )
    elif query.data == "Music_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
             )
         
def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_photo(random.choice(ABHI),
                f"‚ùç ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥ò ·¥è“ì {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text=" ú·¥á ü·¥ò",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_photo(random.choice(NYKAA),"‚ò® ·¥° ú·¥á Ä·¥á ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥è·¥ò·¥á…¥ ·¥õ ú·¥á s·¥á·¥õ·¥õ…™…¥…¢s ·¥ç·¥á…¥·¥ú?.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥ …™…¥ ·¥© Ä…™·¥†·¥Ä·¥õ·¥á",
                            url="https://t.me/{}?start=help".format(context.bot.username),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥  ú·¥á Ä·¥á",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="yuki_support")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hi there! There are quite a few settings for {} - go ahead and pick what "
                you're interested in.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(text=
                """Hi there! There are quite a few settings for {} - go ahead and pick what 
                you're interested in.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hi there! There are quite a few settings for {} - go ahead and pick what 
                you're interested in.""".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Message is not modified",
            "Query_id_invalid",
            "Message can't be deleted",
        ]:
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "‚ò® ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ's s·¥á·¥õ·¥õ…™…¥…¢s ·¥Äs ·¥°·¥á ü ü ·¥Äs  è·¥è·¥ú Äs"
            msg.reply_photo(random.choice(ABHI),text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="s·¥á·¥õ·¥õ…™…¥…¢s",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "‚ò® ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s"

    else:
        send_settings(chat.id, user.id, True)


def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 6259443940:
            update.effective_message.reply_text(
                f"‡πè ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä ·¥è“ì {dispatcher.bot.first_name} Not Available!!"
                f"\n\n‡πè  ô·¥ú·¥õ  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥©·¥á Äs·¥è…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  Ä·¥ú…¥…¥…™…¥…¢ ·¥ç·¥á : @ghost_kun",
                parse_mode=ParseMode.MARKDOWN,
                
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                
            )

            update.effective_message.reply_text(
                "‚ùç …™·¥†·¥á ·¥ò·¥ç'·¥á·¥Ö  è·¥è·¥ú ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "‚ùç ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç “ì…™ Äs·¥õ ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop

# web response 
async def web_response():
    app = web.AppRunner(await web_server())
    await app.setup()
    bind_address = "0.0.0.0"
    await web.TCPSite(app, bind_address, 8080).start()


def main():
    global x
    x=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è",
                            url="https://t.me/yuki_obot?startgroup=true"
                            )
                       ]
                ]
                     )
    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.send_photo(
                f"@{SUPPORT_CHAT}",
                photo=f"{START_IMG}",
                caption=f"""
‡øã„Ö§{BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á  ‡øã
‚ó§‚ó¢‚ó£‚ó•‚ó§‚ó¢‚ó£‚ó•‚ó§‚ó¢‚ó£‚ó•‚ó§‚ó¢‚ó£‚ó•‚ó§‚ó¢
‚ò® ·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥ ‚û• `{y()}`
‚ò®  ü…™ ô Ä·¥Ä Ä è ·¥†·¥á Äs…™·¥è…¥ ‚û• `{telever}`
‚ò® ·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥ ‚û• `{tlhver}`
‚ò® ·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á Äs…™·¥è…¥ ‚û• `{pyrover}`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚îÅ‚îà‚îà‚îÅ‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä----P·¥Ä Ä·¥Ä·¥Ö·¥èx----
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚îÅ‚îà‚îà‚îÅ‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
""",reply_markup=x,
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                f"Bot isn't able to send message to @{SUPPORT_CHAT}, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)
    start_handler = CommandHandler("start", start, run_async=True)

    help_handler = CommandHandler("help", get_help, run_async=True)
    help_callback_handler = CallbackQueryHandler(
        help_button, pattern=r"help_.*", run_async=True
    )

    settings_handler = CommandHandler("settings", get_settings, run_async=True)
    settings_callback_handler = CallbackQueryHandler(
        settings_button, pattern=r"stngs_", run_async=True
    )

    about_callback_handler = CallbackQueryHandler(
        yuki_about_callback, pattern=r"yuki_", run_async=True
    )
    source_callback_handler = CallbackQueryHandler(
        Source_about_callback, pattern=r"source_", run_async=True
    )
    music_callback_handler = CallbackQueryHandler(
        Music_about_callback, pattern=r"Music_",run_async=True
    )
    YukiBot_main_handler = CallbackQueryHandler(
        YukiBot_Main_Callback, pattern=r".*_help",run_async=True)
    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(music_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)
    dispatcher.add_handler(YukiBot_main_handler)
    dispatcher.add_error_handler(error_callback)
    dispatcher.add_handler(source_callback_handler)
    LOGGER.info("Using long polling.")
    updater.start_polling(timeout=15, read_latency=4, drop_pending_updates=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
        
